int_n = length(arr_a)
result = 0
arr_pref = prefix_sums(arr_a)
for(ndx_p in seq(min(int_m, int_k) + 1)){
left_pos = int_k - ndx_p
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 2 * ndx_p))
result = max(result, count_total(arr_pref, left_pos, right_pos))
print(c("loop":1, "A[p]":arr_a[ndx_p], "left":left_pos, "right":right_pos, "result":result))
}
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p
left_pos = max(0, min(int_k, int_k - (int_m - 2 * ndx_p)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
print(c("loop":2, "left":left_pos, "right":right_pos, "result":result))
}
return(result)
}
rm(list=ls())
prefix_sums <- function(arr_a){
# 5.1 Counting prefix sums
len_n = length(arr_a)
arr_res = rep(0, len_n + 1)
for(k in 1:(len_n)){
arr_res[k] = arr_res[k] + arr_a[k]
}
return(arr_res)
}
count_total <- function(arr_p, int_x, int_y){
# 5.2 total of one slice
return(arr_p[int_y + 1] - arr_p[int_x])
}
mushrooms <- function(arr_a, int_k, int_m){
# 5.3 mushroom picker O(n+m)
int_n = length(arr_a)
result = 0
arr_pref = prefix_sums(arr_a)
for(ndx_p in seq(min(int_m, int_k) + 1)){
left_pos = int_k - ndx_p
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 2 * ndx_p))
result = max(result, count_total(arr_pref, left_pos, right_pos))
print(c("loop":1, "A[p]":arr_a[ndx_p], "left":left_pos, "right":right_pos, "result":result))
}
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p
left_pos = max(0, min(int_k, int_k - (int_m - 2 * ndx_p)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
print(c("loop":2, "left":left_pos, "right":right_pos, "result":result))
}
return(result)
}
mushrooms(c(2,3,7,5,1,3,9), 4,6)
mushrooms <- function(arr_a, int_k, int_m){
# 5.3 mushroom picker O(n+m)
int_n = length(arr_a)
result = 0
arr_pref = prefix_sums(arr_a)
for(ndx_p in seq(min(int_m, int_k) + 1)){
left_pos = int_k - ndx_p
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 2 * ndx_p))
result = max(result, count_total(arr_pref, left_pos, right_pos))
print(c("loop"=1, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result))
}
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p
left_pos = max(0, min(int_k, int_k - (int_m - 2 * ndx_p)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
print(c("loop"=2, "left"=left_pos, "right"=right_pos, "result"=result))
}
return(result)
}
mushrooms(c(2,3,7,5,1,3,9), 4,6)
mushrooms <- function(arr_a, int_k, int_m){
# 5.3 mushroom picker O(n+m)
int_n = length(arr_a)
result = 0
arr_pref = prefix_sums(arr_a)
for(ndx_p in seq(min(int_m, int_k) + 1)){
left_pos = int_k - ndx_p
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 2 * ndx_p))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp<-c("loop"=1, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
ifelse(ndx_p==1,
DF <- data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))),
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp))))))
}
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p
left_pos = max(0, min(int_k, int_k - (int_m - 2 * ndx_p)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp <- c("loop"=2, "left"=left_pos, "right"=right_pos, "result"=result)
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))))
}
print(DF)
return(result)
}
mushrooms(c(2,3,7,5,1,3,9), 4,6)
arr_a<-c(2,3,7,5,1,3,9)
int_k <- 4
int_m <- 6
# 5.3 mushroom picker O(n+m)
int_n = length(arr_a)
result = 0
arr_pref = prefix_sums(arr_a)
prefix_sums(c(2,3,7,5,1,3,9))
1:7
prefix_sums <- function(arr_a){
# 5.1 Counting prefix sums
len_n = length(arr_a)
arr_res = rep(0, len_n + 1)
for(k in 2:(len_n+1)){
arr_res[k] = arr_res[k-1] + arr_a[k-1]
}
return(arr_res)
}
prefix_sums(c(2,3,7,5,1,3,9))
mushrooms(c(2,3,7,5,1,3,9), 4,6)
arr_pref = prefix_sums(arr_a)
for(ndx_p in seq(min(int_m, int_k) + 1)){
left_pos = int_k - ndx_p
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 2 * ndx_p))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp<-c("loop"=1, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
ifelse(ndx_p==1,
DF <- data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))),
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp))))))
}
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p
left_pos = max(0, min(int_k, int_k - (int_m - 2 * ndx_p)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp <- c("loop"=2, "left"=left_pos, "right"=right_pos, "result"=result)
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))))
}
# 5.3 mushroom picker O(n+m)
int_n = length(arr_a)
result = 0
arr_pref = prefix_sums(arr_a)
for(ndx_p in seq(min(int_m, int_k) + 1)){
left_pos = int_k - ndx_p
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 2 * ndx_p))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp<-c("loop"=1, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
ifelse(ndx_p==1,
DF <- data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))),
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp))))))
}
DF
seq(min(int_m + 1, int_n - int_k))
ndx_p
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p
left_pos = max(0, min(int_k, int_k - (int_m - 2 * ndx_p)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp <- c("loop"=2, "left"=left_pos, "right"=right_pos, "result"=result)
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))))
}
ndx_p
right_pos = int_k + ndx_p
right_pos
left_pos = max(0, min(int_k, int_k - (int_m - 2 * ndx_p)))
left_pos
result = max(result, count_total(arr_pref, left_pos, right_pos))
result
temp <- c("loop"=2, "left"=left_pos, "right"=right_pos, "result"=result)
temp
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p
left_pos = max(0, min(int_k, int_k - (int_m - 2 * ndx_p)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp <- c("loop"=2,"A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))))
}
print(DF)
prefix_sums(arr_a)
mushrooms <- function(arr_a, int_k, int_m){
# 5.3 mushroom picker O(n+m)
int_n = length(arr_a)
result = 0
arr_pref = prefix_sums(arr_a)
for(ndx_p in seq(min(int_m, int_k) + 1)){
left_pos = int_k - ndx_p
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 2 * ndx_p))-1
result = max(result, count_total(arr_pref, left_pos, right_pos))-1
temp<-c("loop"=1, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
ifelse(ndx_p==1,
DF <- data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))),
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp))))))
}
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p - 1
left_pos = max(0, min(int_k, int_k - (int_m - 2 * ndx_p)))-1
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp <- c("loop"=2,"A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))))
}
print(DF)
return(result)
}
mushrooms(c(2,3,7,5,1,3,9), 4,6)
arr_pref = prefix_sums(arr_a)
for(ndx_p in seq(min(int_m, int_k) + 1)){
left_pos = int_k - ndx_p
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 2 * ndx_p))-1
result = max(result, count_total(arr_pref, left_pos, right_pos))-1
temp<-c("loop"=1, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
ifelse(ndx_p==1,
DF <- data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))),
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp))))))
}
DF
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p - 1
left_pos = max(0, min(int_k, int_k - (int_m - 2 * ndx_p)))-1
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp <- c("loop"=2,"A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))))
}
print(DF)
for(ndx_p in seq(min(int_m, int_k) + 1)){
left_pos = int_k - ndx_p
right_pos = min(int_n - 0, max(int_k, int_k + int_m - 1 * ndx_p))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp<-c("loop"=1, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
ifelse(ndx_p==1,
DF <- data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))),
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp))))))
}
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p - 1
left_pos = max(0, min(int_k, int_k - (int_m - 2 * ndx_p)))-1
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp <- c("loop"=2,"A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))))
}
print(DF)
for(ndx_p in seq(min(int_m, int_k) + 1)){
left_pos = int_k - ndx_p + 1
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 2 * ndx_p))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp<-c("loop"=1, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
ifelse(ndx_p==1,
DF <- data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))),
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp))))))
}
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p - 1
left_pos = max(0, min(int_k, int_k - (int_m - 2 * ndx_p)))-1
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp <- c("loop"=2,"A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))))
}
int_k <- int_k-1
for(ndx_p in seq(min(int_m, int_k) + 1)){
left_pos = int_k - ndx_p
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 2 * ndx_p))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp<-c("loop"=1, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
ifelse(ndx_p==1,
DF <- data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))),
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp))))))
}
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p
left_pos = max(0, min(int_k, int_k - (int_m - 2 * ndx_p)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp <- c("loop"=2, "left"=left_pos, "right"=right_pos, "result"=result)
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))))
}
print(DF)
ndx_p
seq(min(int_m + 1, int_n - int_k))
int_k <- int_k+1
# int_k <- int_k+1
for(ndx_p in seq(min(int_m, int_k) + 1)){
left_pos = int_k - ndx_p
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 2 * ndx_p))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp<-c("loop"=1, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
ifelse(ndx_p==1,
DF <- data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))),
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp))))))
}
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p
left_pos = max(0, min(int_k, int_k - (int_m - 2 * ndx_p)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp <- c("loop"=2, "left"=left_pos, "right"=right_pos, "result"=result)
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))))
}
right_pos
left_pos
result = max(result, count_total(arr_pref, left_pos, right_pos))
result
temp <- c("loop"=2, "left"=left_pos, "right"=right_pos, "result"=result)
temp
temp <- c("loop"=2, 'A[p]'=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p
left_pos = max(0, min(int_k, int_k - (int_m - 2 * ndx_p)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp <- c("loop"=2, 'A[p]'=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))))
}
print(DF)
int_k
# 5.3 mushroom picker O(n+m)
int_n <- length(arr_a)
result <- 0
arr_pref <- prefix_sums(arr_a)
# int_k <- int_k+1
for(ndx_p in seq(min(int_m, int_k) + 1)){
left_pos = int_k - ndx_p
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 2 * ndx_p))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp<-c("loop"=1, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
ifelse(ndx_p==1,
DF <- data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))),
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp))))))
}
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p
left_pos = max(0, min(int_k, int_k - (int_m - 2 * ndx_p)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp <- c("loop"=2, 'A[p]'=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))))
}
print(DF)
# int_k <- int_k+1
for(ndx_p in seq(min(int_m, int_k) + 1)){
left_pos = int_k - ndx_p + 1
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 2 * ndx_p))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp<-c("loop"=1, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
ifelse(ndx_p==1,
DF <- data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))),
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp))))))
}
DF
min(int_m, int_k) + 1
int_n - 1
int_k
int_k
int_m
ndx_p
# int_k <- int_k+1
for(ndx_p in seq(min(int_m, int_k) + 1)){
left_pos = int_k - ndx_p + 1
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 2 * (ndx_p-1)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp<-c("loop"=1, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
ifelse(ndx_p==1,
DF <- data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))),
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp))))))
}
DF
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p
left_pos = max(0, min(int_k, int_k - (int_m - 2 * ndx_p)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp <- c("loop"=2, 'A[p]'=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))))
}
print(DF)
print(DF[DF$loop==2,])
# int_k <- int_k+1
for(ndx_p in seq(min(int_m, int_k) + 1)){
left_pos = int_k - ndx_p + 1
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 2 * (ndx_p-1)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp<-c("loop"=1,'ndx_p'=ndx_p, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
ifelse(ndx_p==1,
DF <- data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))),
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp))))))
}
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p
left_pos = max(0, min(int_k, int_k - (int_m - 2 * ndx_p)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp <- c("loop"=2,'ndx_p'=ndx_p, 'A[p]'=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))))
}
print(DF[DF$loop==2,])
count_total(arr_pref, left_pos, right_pos)
min(int_k, int_k - (int_m - 2 * ndx_p))
max(0, min(int_k, int_k - (int_m - 2 * (ndx_p-1))))
# int_k <- int_k+1
for(ndx_p in seq(min(int_m, int_k) + 1)){
left_pos = int_k - ndx_p + 1
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 2 * (ndx_p-1)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp<-c("loop"=1,'ndx_p'=ndx_p, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
ifelse(ndx_p==1,
DF <- data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))),
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp))))))
}
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p
left_pos = max(0, min(int_k, int_k - (int_m - 2 * (ndx_p-1))))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp <- c("loop"=2,'ndx_p'=ndx_p, 'A[p]'=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))))
}
print(DF[DF$loop==2,])
# int_k <- int_k+1
for(ndx_p in seq(min(int_m, int_k) + 1)){
left_pos = int_k - ndx_p + 1
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 2 * (ndx_p-1)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp<-c("loop"=1,'ndx_p'=ndx_p, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
ifelse(ndx_p==1,
DF <- data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))),
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp))))))
}
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p - 1
left_pos = max(0, min(int_k, int_k - (int_m - 2 * (ndx_p-1))))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp <- c("loop"=2,'ndx_p'=ndx_p, 'A[p]'=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))))
}
print(DF[DF$loop==2,])
print(DF)
result
seq(min(int_m, int_k) + 1)
seq(min(int_m + 1, int_n - int_k))
# int_k <- int_k+1
for(ndx_p in seq(min(int_m, int_k) + 1)){
left_pos = int_k - ndx_p + 1
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 2 * (ndx_p-1)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp<-c("loop"=1,'ndx_p'=ndx_p, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
ifelse(ndx_p==1,
DF <- data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))),
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp))))))
}
for(ndx_p in seq(0, min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p
left_pos = max(0, min(int_k, int_k - (int_m - 2 * (ndx_p-1))))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp <- c("loop"=2,'ndx_p'=ndx_p, 'A[p]'=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))))
}
DF
temp
arr_a[ndx_p]
seq(0, min(int_m, int_k))
args(seq)
seq(3,3)
int_k
int_k <- int_k-1
int_k <- int_k+0
int_k <- int_k+1
int_k <- int_k+1
seq(min(int_m, int_k))
for(ndx_p in seq(min(int_m, int_k))){
left_pos = int_k - ndx_p
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 1 * (ndx_p)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp<-c("loop"=1,'ndx_p'=ndx_p, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
ifelse(ndx_p==0,
DF <- data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))),
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp))))))
}
DF
for(ndx_p in seq(min(int_m, int_k))){
left_pos = int_k - ndx_p
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 1 * (ndx_p)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp<-c("loop"=1,'ndx_p'=ndx_p, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
ifelse(ndx_p==1,
DF <- data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))),
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp))))))
}
DF
for(ndx_p in seq(min(int_m, int_k))){
left_pos = int_k - ndx_p
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 1 * ndx_p))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp<-c("loop"=1,'ndx_p'=ndx_p, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
ifelse(ndx_p==1,
DF <- data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))),
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp))))))
}
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p - 1
left_pos = max(1, min(int_k, int_k - (int_m - 1 * ndx_p)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp <- c("loop"=2,'ndx_p'=ndx_p, 'A[p]'=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))))
}
print(DF)
for(ndx_p in seq(min(int_m, int_k))){
left_pos = int_k - ndx_p
right_pos = min(int_n - 1, max(int_k, int_k + int_m - 1 * ndx_p))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp<-c("loop"=1,'ndx_p'=ndx_p, "A[p]"=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
ifelse(ndx_p==1,
DF <- data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))),
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp))))))
}
for(ndx_p in seq(min(int_m + 1, int_n - int_k))){
right_pos = int_k + ndx_p - 1
left_pos = max(0, min(int_k, int_k - (int_m - 1 * ndx_p)))
result = max(result, count_total(arr_pref, left_pos, right_pos))
temp <- c("loop"=2,'ndx_p'=ndx_p, 'A[p]'=arr_a[ndx_p], "left"=left_pos, "right"=right_pos, "result"=result)
DF <- rbind(DF, data.frame(matrix(temp, nrow=1,dimnames = list(NULL, names(temp)))))
}
print(DF)
min(int_m + 1, int_n - int_k))
min(int_m + 1, int_n - int_k)
int_m + 1
int_n - int_k
